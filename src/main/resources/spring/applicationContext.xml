<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        ">

    <!--上面的xsd最好和当前使用的Spring版本号一致,如果换了Spring版本,这个最好也跟着改-->

    <!-- 引入属性文件 放在最开头,在使用spring之前就引入,里面的变量才能被引用-->
    <context:property-placeholder location="classpath*:properties/*.properties"/>
    <!--
    引入属性文件也可以用这种写法
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config.properties" />
    </bean>
    -->

    <!-- 自动扫描(需要自动注入的类，对于那些类上有注解：@Repository、@Service、@Controller、@Component都进行注入) -->
    <!--因为 Spring MVC 是 Spring 的子容器，所以我们在 Spring MVC 的配置中再指定扫描 Controller 的注解，这里是父容器的配置地方-->
    <!--注解注入的相关材料可以看：-->
    <!--http://blog.csdn.net/u012763117/article/details/17253849-->
    <!--http://casheen.iteye.com/blog/295348-->
    <!--http://blog.csdn.net/zhang854429783/article/details/6785574-->
    <context:component-scan base-package="com.wz"/>
    <context:component-scan base-package="com.wz.framework.aop,com.wz.framework.interceptor"/>

    <!-- 资料：http://www.cnblogs.com/-bumblebee-/archive/2012/03/23/2413366.html-->
    <context:annotation-config />
    <bean id="configRealm" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
         <property name="locations">
             <list>
               <value>classpath:properties/application.properties</value>
             </list>
        </property>
   </bean>
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
          <property name="properties" ref="configRealm"/>
     </bean>


    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <!--要对 Controller 进行 AOP 日志处理，只能放在这里，如果单独放一个 xml 文件是没有效果的-->

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <context:component-scan base-package="com.wz" use-default-filters="true">
        <context:include-filter type="regex" expression="com\.wz\.*\.service\..*"/>
        <context:include-filter type="regex" expression="com\.wz\.*\.dao\..*"/>
        <context:include-filter type="regex" expression="com\.wz\.*Com"/>
    </context:component-scan>

    <bean class="com.wz.framework.instantiation.InstantiationSql"/>
    <bean class="com.wz.framework.instantiation.SpringContextHolder"/>


    <!--设置拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" /> <!--拦截所有请求-->
            <bean class="com.wz.framework.interceptor.SystemInitInterceptor">
                <property name="ignoreUrl">
                    <list>



                        <value>/userLoginGo</value>
                        <value>/login</value>
                        <!--<value>/success</value>-->
                        <value>/css/**</value>
                        <value>/js/**</value>
                        <value>/css_wz/**</value>
                        <value>/fonts/**</value>
                        <value>/images/**</value>
                        <value>/less/**</value>



                        <!-- 配置在Controller上路径，其下所有方法都忽略 -->
                        <!-- <value>/sysUserController/**</value>
                         <value>/userLoginContraller/**</value> -->
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 配置注解驱动 -->
    <!-- 处理responseBody 里面日期类型，统一处理返回json日期时间格式 -->
    <!--资料：http://blog.csdn.net/edward9145/article/details/18700415-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
                            </bean>
                        </property>
                    </bean>
                </property>
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                        <value>application/xml;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 静态文件路径处理 -->
    <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>
    <mvc:resources mapping="/css_wz/**" location="/WEB-INF/statics/css_wz/"/>
    <mvc:resources mapping="/css_jquery_mobile/**" location="/WEB-INF/statics/css_jquery_mobile/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>
    <mvc:resources mapping="/images/**" location="/WEB-INF/statics/images/"/>
    <mvc:resources mapping="/images_wz/**" location="/WEB-INF/statics/images_wz/"/>
    <mvc:resources mapping="/images_mobile/**" location="/WEB-INF/statics/images_mobile/"/>
    <mvc:resources mapping="/less/**" location="/WEB-INF/statics/less/"/>
    <mvc:resources mapping="/fonts/**" location="/WEB-INF/statics/fonts/"/>
    <mvc:resources mapping="/html/**" location="/WEB-INF/statics/html/"/>


    <!--静态资源映射-->
    <!--
    http://perfy315.iteye.com/blog/2008763
    mapping="/js/**"
    表示当浏览器有静态资源请求的时候，并且请求url路径中带有：/js/，则这个资源跑到webapp目录下的/WEB-INF/statics/js/去找
    比如我们在 JSP 中引入一个 js 文件：src="${webRoot}/js/jQuery-core/jquery-1.6.1.min.js
    -->


</beans>
